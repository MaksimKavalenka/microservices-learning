apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-service
  namespace: {{ .Release.Namespace }}
  labels:
    name: resource-service
spec:
  replicas: {{ .Values.service.deployment.replicas }}
  selector:
    matchLabels:
      name: resource-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 20%
      maxUnavailable: 0
  template:
    metadata:
      labels:
        name: resource-service
    spec:
      containers:
      - name: resource-service
        image: {{ .Values.service.image.name }}:{{ .Values.service.image.tag }}
        ports:
        - name: service-port
          containerPort: {{ .Values.service.expose.port }}
        env:
        - name: AWS_AUTH_ACCESSKEYID
          valueFrom:
            secretKeyRef:
              name: resource-service-postgres-secret
              key: AWS_AUTH_ACCESSKEYID
        - name: AWS_AUTH_SECRETACCESSKEY
          valueFrom:
            secretKeyRef:
              name: resource-service-postgres-secret
              key: AWS_AUTH_SECRETACCESSKEY
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: resource-service-postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: resource-service-postgres-secret
              key: POSTGRES_PASSWORD
        envFrom:
        - configMapRef:
            name: resource-service-configmap
        startupProbe:
          httpGet:
            path: {{ .Values.service.expose.api.health }}
            port: service-port
          initialDelaySeconds: 15
          periodSeconds: 10
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: {{ .Values.service.expose.api.health }}
            port: service-port
          initialDelaySeconds: 15
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: service-port
          initialDelaySeconds: 15
          periodSeconds: 10
