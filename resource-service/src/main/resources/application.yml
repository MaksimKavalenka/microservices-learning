application:
  data:
    deletion:
      limit: 200

aws:
  destination:
    host: localhost
    port: 4566
    url: http://${aws.destination.host}:${aws.destination.port}
  s3:
    bucket-name: resources
    create-if-not-exist: false

database:
  destination:
    host: localhost
    port: 5432
    name: resource_service
    schema: resource_service

eureka:
  client:
    enabled: false
    serviceUrl:
      defaultZone: http://${eureka.destination.host}:${eureka.destination.port}/eureka/
  destination:
    host: localhost
    port: 8761
  instance:
    appname: ${spring.application.name}
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}

flyway:
  database:
    create-if-not-exists: true

retry:
  maxAttempts: 3

server:
  port: 8080
  servlet:
    contextPath: /api

spring:
  application:
    name: resource-service
  config:
    discovery:
      enabled: true
  datasource:
    hikari:
      schema: ${database.destination.schema}
    url: jdbc:postgresql://${database.destination.host}:${database.destination.port}/${database.destination.name}
  flyway:
    schemas: ${database.destination.schema}
    table: schema_version
  jpa:
    database: POSTGRESQL
    hibernate:
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
  rabbitmq:
    host: localhost
    port: 5672
    username: admin
    password: admin
    bindings:
      process:
        source: topic.resources
        routing-key: DOMAIN.RESOURCE.PROCESS
      delete:
        source: topic.resources
        routing-key: DOMAIN.RESOURCE.DELETE
  servlet:
    multipart:
      maxFileSize: -1
      maxRequestSize: -1

---

# docker

docker:
  destination:
    host: host.docker.internal

database:
  destination:
    host: ${docker.destination.host}

eureka:
  destination:
    host: ${docker.destination.host}

spring:
  config:
    activate:
      on-profile: "docker"

---

# eureka

eureka:
  client:
    enabled: true

spring:
  config:
    activate:
      on-profile: "eureka"

---

# development

aws:
  auth:
    access-key-id: test
    secret-access-key: test

database:
  destination:
    port: 5401

logging:
  level:
    org:
      hibernate:
        orm:
          jdbc:
            bind: trace

server:
  port: 8081

spring:
  config:
    activate:
      on-profile: "development"
  datasource:
    username: postgres
    password: postgres
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
