application:
  destination:
    host: localhost

aws:
  destination:
    host: ${application.destination.host}
    port: 4566
    url: http://${aws.destination.host}:${aws.destination.port}
  s3:
    enabled: true

eureka:
  client:
    enabled: false
    serviceUrl:
      defaultZone: http://${eureka.destination.host}:${eureka.destination.port}/eureka/
  destination:
    host: ${application.destination.host}
    port: 8761
  instance:
    appname: ${spring.application.name}
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}

infrastructure:
  authorization-server:
    alias: authorization-server
    host: ${application.destination.host}
    port: 8090
    url: http://${infrastructure.authorization-server.host}:${infrastructure.authorization-server.port}
  song-service:
    alias: song-service
    host: ${application.destination.host}
    port: 8080
    url: http://${infrastructure.song-service.host}:${infrastructure.song-service.port}
  storage-service:
    alias: storage-service
    host: ${application.destination.host}
    port: 8080
    url: http://${infrastructure.storage-service.host}:${infrastructure.storage-service.port}

management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: http://${application.destination.host}:9411/api/v2/spans

retry:
  maxAttempts: 3

server:
  port: 8080
  servlet:
    contextPath: /api

spring:
  application:
    name: resource-processor
  cloud:
    function:
      definition: resourceProcessChannel;resourceDeletionChannel
    stream:
      source: resourceProcessedAckChannel
      bindings:
        resourceProcessChannel-in-0:
          destination: topic.resources
          group: resource-process-channel-group
        resourceDeletionChannel-in-0:
          destination: topic.resources
          group: resource-deletion-channel-group
        resourceProcessedAckChannel:
          destination: topic.resources
      rabbit:
        bindings:
          resourceProcessChannel-in-0:
            consumer:
              bindingRoutingKey: "DOMAIN.RESOURCE.PROCESS"
          resourceDeletionChannel-in-0:
            consumer:
              bindingRoutingKey: "DOMAIN.RESOURCE.DELETE"
          resourceProcessedAckChannel:
            producer:
              routingKeyExpression: "'DOMAIN.RESOURCE.PROCESSED.ACK'"
  config:
    discovery:
      enabled: true
  rabbitmq:
    host: ${application.destination.host}
    port: 5672
  security:
    oauth2:
      client:
        registration:
          resource-processor-client:
            provider: spring
            client-id: resource-processor
            client-secret: resource-processor-secret
            authorization-grant-type: client_credentials
            client-authentication-method: client_secret_basic
        provider:
          spring:
            issuer-uri: ${infrastructure.authorization-server.url}
  servlet:
    multipart:
      maxFileSize: -1
      maxRequestSize: -1

---

# docker

application:
  destination:
    host: host.docker.internal

spring:
  config:
    activate:
      on-profile: "docker"

---

# eureka

eureka:
  client:
    enabled: true

spring:
  config:
    activate:
      on-profile: "eureka"

---

# development

aws:
  auth:
    access-key-id: test
    secret-access-key: test

infrastructure:
  authorization-server:
    port: 8090
  song-service:
    port: 8082
  storage-service:
    port: 8085

server:
  port: 8083

spring:
  config:
    activate:
      on-profile: "development"
  rabbitmq:
    username: admin
    password: admin
