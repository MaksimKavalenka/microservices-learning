application:
  destination:
    host: localhost

aws:
  destination:
    host: ${application.destination.host}
    port: 4566
    url: http://${aws.destination.host}:${aws.destination.port}
  s3:
    enabled: true

eureka:
  client:
    enabled: false
    serviceUrl:
      defaultZone: http://${eureka.destination.host}:${eureka.destination.port}/eureka/
  destination:
    host: ${application.destination.host}
    port: 8761
  instance:
    appname: ${spring.application.name}
    metadataMap:
      instanceId: ${spring.application.name}:${server.port}

infrastructure:
  song-service:
    alias: song-service
    host: ${application.destination.host}
    port: 8080
    url: http://${infrastructure.song-service.host}:${infrastructure.song-service.port}
  storage-service:
    alias: storage-service
    host: ${application.destination.host}
    port: 8080
    url: http://${infrastructure.storage-service.host}:${infrastructure.storage-service.port}

management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  metrics:
    export:
      prometheus:
        enabled: true

retry:
  maxAttempts: 3

server:
  port: 8080
  servlet:
    contextPath: /api

spring:
  application:
    name: resource-processor
  config:
    discovery:
      enabled: true
  rabbitmq:
    host: ${application.destination.host}
    port: 5672
    bindings:
      processed-ack:
        source: topic.resources
        routing-key: DOMAIN.RESOURCE.PROCESSED.ACK
    queues:
      process: queue.resources.process,queue.resources.process.dlq
      delete: queue.resources.delete,queue.resources.delete.dlq
  servlet:
    multipart:
      maxFileSize: -1
      maxRequestSize: -1

---

# docker

application:
  destination:
    host: host.docker.internal

spring:
  config:
    activate:
      on-profile: "docker"

---

# eureka

eureka:
  client:
    enabled: true

spring:
  config:
    activate:
      on-profile: "eureka"

---

# development

aws:
  auth:
    access-key-id: test
    secret-access-key: test

infrastructure:
  song-service:
    port: 8082
  storage-service:
    port: 8085

server:
  port: 8083

spring:
  config:
    activate:
      on-profile: "development"
  rabbitmq:
    username: admin
    password: admin
